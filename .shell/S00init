#!/bin/bash

## Mod's initialization script
##
## Copyright (C) 2025, Alexander K <https://github.com/drA1ex>
##
## This file may be distributed under the terms of the GNU GPLv3 license

INIT_FLAG="/tmp/init_finished_f"

source /opt/config/mod/.shell/common.sh

mount_data_partition() {
    # mount data - this would otherwise be mounted later by Flashforge's firmware
    if ! mount | grep -q /dev/mmcblk0p7; then
        echo "// Mounting /data partition..."
        fsck -y /dev/mmcblk0p7 || true
        mount /dev/mmcblk0p7 /data;
    fi
    
    # local timeout=60
    # while ! mount | grep -q /dev/mmcblk0p7 && [ $timeout -gt 0 ]; do
    #     echo "Waiting /data..."; sleep 1;
    #     timeout=$(( timeout - 1 ))
    # done
    
    if ! mount | grep -q /dev/mmcblk0p7; then
        echo "@@ Mounting /data failed."
        exit 1
    fi
}

handle_special_boot_mode() {
    if /opt/config/mod/.shell/boot/init_boot_flag.sh apply; then
        echo "?? Mod skipped."
        exit 0
    fi
}

initialize() {
    echo "// *** Start initialization"
    
    echo "// Checking special boot mode"
    handle_special_boot_mode
    
    # If we are here: mod loading not skipped

    xzcat /opt/config/mod/load.img.xz > /dev/fb0

    mount_data_partition

    rotate_logs "/data/logFiles/boot.log"
    rotate_logs "/data/logFiles/ssh.log"
    rotate_logs "/data/logFiles/wifi.log"
    
    echo "// Init Swap"
    /opt/config/mod/.shell/boot/init_swap.sh

    echo "// Init Buildroot"
    init_chroot

    echo "// Apply Klipper patches"
    apply_klipper_patches
    
    echo "// Apply other patches"
    apply_other_patches

    echo "// Restore config"
    fix_config

    echo "// Init mod's files"

    # Services
    rm -f /etc/init.d/S99moon
    rm -f /etc/init.d/K99moon

    ln -fs /opt/config/mod/.shell/S55boot /etc/init.d/
    ln -fs /opt/config/mod/.shell/S60dropbear /etc/init.d/
    ln -fs /opt/config/mod/.shell/S98camera /etc/init.d/
    ln -fs /opt/config/mod/.shell/S98zssh /etc/init.d/
    ln -fs /opt/config/mod/.shell/S99root /etc/init.d/
    ln -fs /opt/config/mod/.shell/K99root /etc/init.d/
    
    # oh-my-zsh
    mkdir -p /root/.oh-my-zsh
    mount --bind /opt/config/mod/.zsh/.oh-my-zsh /root/.oh-my-zsh
    ln -fs /opt/config/mod/.zsh/.profile /root/
    ln -fs /opt/config/mod/.zsh/.zshrc /root/

    # Runtime
    ln -fns /opt/config/mod/.bin/runtime/14.2.0 /opt/lib/

    echo "// Init version"
    
    # version
    # TODO: Handle case when freshly installed from binary file    
    GIT_BRANCH=$(chroot $MOD git --git-dir=/opt/config/mod/.git rev-parse --abbrev-ref HEAD)
    GIT_COMMIT_ID=$(chroot $MOD git --git-dir=/opt/config/mod/.git rev-parse --short HEAD)
    GIT_COMMIT_DATE=$(chroot $MOD git --git-dir=/opt/config/mod/.git show -s HEAD --format=%cd --date=format:'%d.%m.%Y %H:%M:%S')
    
    FIRMWARE_VERSION=$(cat /root/version)
    MOD_VERSION=$(cat /opt/config/mod/version.txt)
    PATCH_VERSION="$GIT_BRANCH-$GIT_COMMIT_ID @ $GIT_COMMIT_DATE"

    if [ "$GIT_BRANCH" != "main" ]; then
        echo "$GIT_BRANCH-$GIT_COMMIT_ID" > /tmp/version_patch
    fi
    
    chroot $MOD /opt/config/mod/.root/version.sh "$FIRMWARE_VERSION" "$MOD_VERSION" "$PATCH_VERSION"

    # Print version onto the screen
    "$SCRIPTS/screen.sh" draw_loading

    echo "// Apply database migrations"
    
    # database
    if [ -f "/opt/config/mod_data/database/moonraker-sql.db" ]; then
        /opt/config/mod/.shell/migrate_db.sh
    fi

    echo "// Misc initialization step"
    
    /opt/config/mod/.shell/motd.sh > /etc/motd
    /opt/config/mod/.shell/commands/zshaper.sh --clear

    ln -fns /opt/config/mod_data/log /data/logFiles/mod
    
    # (?) Restrict public unauthorized access to printer's camera (only SerialNnumber is needed)
    grep -q qvs.qiniuapi.com /etc/hosts || sed -i '2 i\127.0.0.1 qvs.qiniuapi.com' /etc/hosts
    
    echo "// *** End initialization"
}

init_chroot() {
    mount -t proc /proc $MOD/proc
    mount --rbind /sys $MOD/sys
    mount --rbind /dev $MOD/dev
    mount --bind /run $MOD/run
    mount --bind /tmp $MOD/tmp
    
    mkdir -p $MOD/data
    mkdir -p $MOD/opt/config
    mkdir -p $MOD/root/printer_data
    
    mount --bind /data $MOD/data
    mount --bind /opt/config $MOD/opt/config
    mount --bind /opt/klipper $MOD/opt/klipper
    
    mkdir -p /root/printer_data
    mkdir -p /root/printer_data/certs
    mkdir -p /root/printer_data/comms
    mkdir -p /root/printer_data/misc
    mkdir -p /root/printer_data/tmp
    
    # Init /root/printer_data
    ln -fns /data /root/printer_data/gcodes
    ln -fns /data/logFiles /root/printer_data/logs
    ln -fns /opt/config/ /root/printer_data/config
    ln -fns /opt/config/mod_data/database /root/printer_data/database
    ln -fns /opt/config/mod/.bin/exec /root/printer_data/bin
    ln -fns /opt/config/mod/.py /root/printer_data/py
    ln -fns /opt/config/mod/.shell /root/printer_data/scripts
    
    ln -fns /opt/config/mod/.root/moonraker.asvc /root/printer_data/moonraker.asvc
    
    mount --bind /root/printer_data $MOD/root/printer_data

    # hwclock
    ln -fs /opt/config/mod/.root/fake-hwclock $MOD/usr/sbin/
    
    # moon
    ln -fns /opt/config/mod/.root/moonraker $MOD/root/moonraker-env/moonraker

    # web
    mkdir -p $MOD/root/www
    [ -d $MOD/root/fluidd ] && mv $MOD/root/fluidd $MOD/root/www/
    [ -d $MOD/root/mainsail ] && mv $MOD/root/mainsail $MOD/root/www/

    ln -fs /opt/config/mod/.root/config.json $MOD/root/www/

    # load datetime
    echo "// Loading last saved time..."
    chroot $MOD fake-hwclock load
}

apply_klipper_patches() {
    local SRC_DIR="/opt/config/mod/.py/klipper"
    local TARGET_DIR="/opt/klipper/klippy"
    
    # Klipper extensions
    echo "// Link klipper plugins: "
    echo $SRC_DIR/plugins/*
    echo

    # Remove old patches/extensions
    find $TARGET_DIR -type l | while read -r file; do
        local rel_path=${file#"$TARGET_DIR/"}
        local file_name=${file##*/}

        if [ -f "$file.bak" ]; then # Patch
            if [ ! -f "$SRC_DIR/patches/$rel_path" ]; then
                echo "// Remove old patch: $file"
                mv "$file.bak" "$file"
            fi
        else
            if [ ! -f "$SRC_DIR/plugins/$file_name" ]; then
                echo "// Remove old plugin: $file"
                rm -f "$file"
            fi
        fi
    done
    
    # Link new extensions
    ln -fs $SRC_DIR/plugins/* "$TARGET_DIR/extras/"
    
    # Apply klipper patches
    find $SRC_DIR/patches -type f | while read -r file; do
        local rel_file=${file#"$SRC_DIR/patches/"}
        local rel_path=$(dirname "$rel_file")
        local target="$TARGET_DIR/$rel_file"
        
        mkdir -p "$TARGET_DIR/$rel_path"
        
        if [ ! -L "$target" ]; then
            echo "// Create klipper file backup: $target"
            mv "$target" "$target.bak"
            
            echo "// Link patched klipper file: $file"
            ln -fs "$file" "$target"
        else
            ln -fs "$file" "$target"
        fi
    done
}

_apply_patch() {
    if [ $# -lt 4 ]; then
        echo "Required arguments missing"
        return 1
    fi

    local patch_file=$1
    local target_file=$2
    local start_block=$3
    local end_block=$4
    local paste_after="${5:-$4}"

    local temp_file="/tmp/$(basename "$target_file").bak"

    sed "/$start_block/,/$end_block/d" "$target_file" > "$temp_file"
    sed -i "/$paste_after/r $patch_file" "$temp_file"

    if ! cmp -s "$target_file" "$temp_file"; then
        echo "// Apply patch to $target_file"
        mv "$temp_file" "$target_file"
    else
        rm -f "$temp_file"
    fi
}

apply_other_patches() {
    # Mainsail baseurl fix
    _apply_patch                                            \
        "/opt/config/mod/.root/patches/mainsail.patch"      \
        "$MOD/root/www/mainsail/index.html"                 \
        "<!--__PATCH_START__-->"                            \
        "<!--__PATCH_END__-->"                              \
        "<html.*>"
}

fix_config() {
    TMP_CFG_PATH=/tmp/printer.tmp.cfg
    BATCH_FILE=/tmp/cfg_backup_batch.json

    # 1. Create dump with parameters from printer.base.cfg
    chroot $MOD /bin/python3 /root/printer_data/py/cfg_backup.py \
        --mode backup \
        --config /opt/config/printer.base.cfg \
        --data $TMP_CFG_PATH \
        --params /opt/config/mod/.cfg/init.move.cfg

    # Check if any parameters were found
    if [ $? -eq 0 ]; then
        # TODO: Merge with defaults?
        DATA_MOVE_CFG=$TMP_CFG_PATH
    else
        DATA_MOVE_CFG=/opt/config/mod/.cfg/data.init.move.cfg
    fi

    # Create the batch file
    echo "[" > $BATCH_FILE

    # 2. Move params from printer.base.cfg to printer.cfg
    # shellcheck disable=SC2129
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.cfg\",
        \"data\": \"$DATA_MOVE_CFG\",
        \"params\": \"/opt/config/mod/.cfg/init.move.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 3. Initialize display configuration
    if "$SCRIPTS"/commands/zdisplay.sh test; then
        # Stock screen enabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display_on.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    else
        # Stock screen disabled
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.cfg\",
            \"params\": \"/opt/config/mod/.cfg/init.display_off.cfg\",
            \"no_data\": true,
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    fi

    # 4. Init printer.cfg configuration
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.cfg\",
        \"params\": \"/opt/config/mod/.cfg/init.cfg\",
        \"data\": \"/opt/config/mod/.cfg/data.init.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 5. Init printer.base.cfg configuration
    echo "
    {
        \"mode\": \"restore\",
        \"config\": \"/opt/config/printer.base.cfg\",
        \"params\": \"/opt/config/mod/.cfg/init.base.cfg\",
        \"data\": \"/opt/config/mod/.cfg/data.init.base.cfg\",
        \"avoid_writes\": true
    }," >> $BATCH_FILE

    # 6. Restore printer.base.cfg if a backup exists
    if [ -f /opt/config/printer.base.cfg.bak ]; then
        echo "
        {
            \"mode\": \"restore\",
            \"config\": \"/opt/config/printer.base.cfg\",
            \"params\": \"/opt/config/mod_data/backup.params.cfg\",
            \"data\": \"/opt/config/printer.base.cfg.bak\",
            \"avoid_writes\": true
        }," >> $BATCH_FILE
    fi

    # Finalize the batch file (remove last comma and close array)
    sed -i '$s/,$//' $BATCH_FILE
    echo "]" >> $BATCH_FILE

    # Run the batch file
    chroot $MOD /bin/python3 /root/printer_data/py/cfg_backup.py --batch $BATCH_FILE

    # Clean up the temporary files
    rm -f $BATCH_FILE $TMP_CFG_PATH
}

rotate_logs() {
    path="$1"

    echo "// Rotating logs: $path"
    mv -f "$path.4"  "$path.5"
    mv -f "$path.3"  "$path.4"
    mv -f "$path.2"  "$path.3"
    mv -f "$path.1"  "$path.2"
    mv -f "$path"    "$path.1"

    echo "// Created" | logged "$path" --no-print
}

case "$1" in
    start)
        if [ -f $INIT_FLAG ]; then
            echo "?? Already initialized!"
            exit 1
        fi

        mkdir -p /opt/config/mod_data/log/
        rotate_logs "/opt/config/mod_data/log/init.log"
        
        initialize 2>&1 | logged "/opt/config/mod_data/log/init.log" --send-to-screen

        touch $INIT_FLAG
        
        sync
    ;;
    
    reload)
        apply_klipper_patches
        apply_other_patches
        fix_config
    ;;

    log)
        cat /opt/config/mod_data/log/init.log
    ;;

    *)
        echo "Usage: $0 (start|reload|log)"
        exit 1
    ;;
esac