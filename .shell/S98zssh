#!/bin/bash

## Tunnel to remote server
##
## Copyright (C) 2025, Alexander K <https://github.com/drA1ex>
## Copyright (C) 2025, Sergei Rozhkov <https://github.com/ghzserg>
##
## This file may be distributed under the terms of the GNU GPLv3 license


if [ -f /tmp/SKIP_MOD ] || [ -f /tmp/SKIP_MOD_SOFT ] || [ -f /tmp/SKIP_MOD_HARD ]; then
    echo "SSH tunnel due to SKIP_MOD mode"
    exit 0
fi

source /opt/config/mod/.shell/common.sh
CFG_PATH="/opt/config/mod_data/ssh.conf"


if ! [ -f /opt/config/mod_data/ssh.key ]; then
    dropbearkey -t ed25519 -f /opt/config/mod_data/ssh.key
    dropbearkey -y -t ed25519 -f /opt/config/mod_data/ssh.key |grep root@kunos >/opt/config/mod_data/ssh.pub.txt
fi


# Create default configuration if needed
if [ ! -f "$CFG_PATH" ]; then
    cp "/opt/config/mod/.cfg/default/ssh.conf" "$CFG_PATH"
fi


source /opt/config/mod_data/ssh.conf

PID_FILE=/run/zssh.pid

[[ " $* " =~ " --silent " ]] && SILENT=1 || SILENT=0

start() {
    enabled=$($CFG_SCRIPT "$VAR_PATH" --get "zssh" "0")
    if [ "$enabled" -eq 0 ]; then
        echo "@@ SSH is disabled"
        return
    fi
    
    if ! is_running; then
        echo "// Starting ssh tunnel..."
        
        sync
        /bin/dropbearmulti dbclient                     \
            -NTfy                                       \
            -i /opt/config/mod_data/ssh.key             \
            -p "${SSH_PORT}"                            \
            -R "${VIDEO_PORT}:127.0.0.1:8080"           \
            -R "${MOON_PORT}:127.0.0.1:7125"            \
            -o ExitOnForwardFailure=yes                 \
            "${SSH_USER}@${SSH_SERVER}"                 \
        &>> "/data/logFiles/ssh.log"
        
        ret=$?
        sync
        
        if [ "$ret" -ne 0 ]; then
            echo "@@ Unable to create SSH tunnel. Returned: $ret"
            exit 1
        fi
        
        echo "// OK"
        
        ps | grep '\-NTf[y]' | head -1 | awk '{print $1}' > "$PID_FILE"
        
        if [ -n "${REMOTE_RUN}" ] && is_running; then
            echo "// Sending remote command..."
            
            sync
            /bin/dropbearmulti dbclient                 \
                -Tfy                                    \
                -i /opt/config/mod_data/ssh.key         \
                -p "${SSH_PORT}"                        \
                "${SSH_USER}@${SSH_SERVER}"             \
                "${REMOTE_RUN}"                         \
            &>> "/data/logFiles/ssh.log"
            
            ret=$?
            sync
            
            if [ "$ret" -ne 0 ]; then
                echo "@@ Unable to run remote command over SSH. Returned: $ret"
                exit 2
            fi
            
            echo "// OK"
        fi
        
        echo "// All done!"
    fi
}

stop() {
    echo "// Stopping SSH tunnel..."
    kill $( ps | grep "\-NTf[y]" | awk '{print $1}' ) > /dev/null 2>&1
    rm -f "$PID_FILE"
}

restart() {
    echo "// Restarting SSH tunnel..."
    
    if is_running; then
        stop
        while is_running; do sleep 1; done
    fi
    
    start
}

is_running() {
    if [ -f $PID_FILE ] && kill -0 "$(cat $PID_FILE)" 2>/dev/null; then
        return 0
    fi
    
    return 1
}

reload() {
    enabled=$($CFG_SCRIPT "$VAR_PATH" --get "zssh" "0")
    if [ "$enabled" -eq 1 ]; then
        if ! is_running; then
            echo "?? SSH connection lost."
            restart
        fi
    fi
}

switch() {
    case "$1" in
        start)
            # Init ssh connection later.
            # Establishing an SSH connection during boot will dramatically increase overall boot time.
            # If the server is unavailable, it will increase it even more.
            if [ -f "$NOT_FIRST_LAUNCH_F" ]; then
                start
            fi
        ;;
        stop)
            stop
        ;;
        restart)
            restart
        ;;
        reload)
            reload
        ;;
        test)
            if is_running; then
                echo "SSH Tunnel is running"
                return 0
            else
                echo "SSH Tunnel is not running"
                return 1
            fi
        ;;
        *)
            echo "Usage: $0 {start|stop|restart|reload|test}"
            exit 1
    esac
}

[ "$SILENT" -eq 1 ] && LOGGED_ARGS=("--no-print")

switch "$@" 2>&1 | logged "/data/logFiles/ssh.log" "${LOGGED_ARGS[@]}"
exit $?
