[include ./shell.cfg]

[skew_correction]
[load_cell_tare]
[md5_check]
[tone_player]

[firmware_retraction]
retract_length: 0.7
retract_speed: 35
unretract_extra_length: 0
unretract_speed: 35

# Mod's variables management
[mod_params]
filename: /opt/config/mod_data/variables.cfg
declaration: /opt/config/mod/mod_params.json
changes_gcode:
    RUN_SHELL_COMMAND CMD=parameter_changed PARAMS="{changes.key} {changes.value} {changes.raw}"


[screws_tilt_adjust]
screw1: -94, -94
screw1_name: front left screw
screw2: 94, -94
screw2_name: front right screw
screw3: 94, 94
screw3_name: rear right screw
screw4: -94, 94
screw4_name: rear left screw
horizontal_move_z: 10.
speed: 600.
screw_thread: CW-M4

[temperature_sensor weightValue]
throttle: 10
reschedule: False
max_temp: 700
exceed_gcode:
    {% set weight_check = printer.mod_params.variables.weight_check %}
    {% set weight_check_max = printer.mod_params.variables.weight_check_max %}

    RESPOND type="error" MSG="Weight exceeded: {value}"
    {% if weight_check == 1 and value >= weight_check_max %}
        ALARM
        {% if printer.idle_timeout.state == "Printing" %}
            M112
        {% endif %}
    {% endif %}


[gcode_macro TONE]
rename_existing: _TONE
gcode:
    {% if printer.mod_params.variables.sound %}
        _TONE {rawparams}
    {% endif %}

[gcode_macro M300]
description: Play tone
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|float %}
    TONE NOTES="{S}:{P}"


[gcode_macro M356]
description: Für Elise
gcode:
     TONE NOTES="659:200 622:200 659:200 622:200 659:200 494:200 587:200 523:200 440:400"

[gcode_macro BEEP]
gcode:
    TONE NOTES="1479.98:150 50 1975.53:200"

[gcode_macro ALARM]
gcode:
    TONE NOTES="100:300 200 100:300"

[gcode_macro G28]
rename_existing: G28.1
description: "Smart axes parking. If no parameters: all axes will park."
gcode:
    SAVE_GCODE_STATE NAME=park_state

    {% set _homed_axis = printer.toolhead.homed_axes|default("") %}
    {% set _has_params = 'X' in params or 'Y' in params or 'Z' in params %}

    {% if "xyz" in _homed_axis %}
        # Do nothing if all axes already parked
        # Print message only if requested to part all axes
        {% if params|length == 0 %}
            RESPOND PREFIX="info" MSG="All axes already parked."
        {% endif %}
    {% else %}
        {% set park_x = 'X' in params if _has_params else True %}
        {% set park_y = 'Y' in params if _has_params else True %}
        {% set park_z = 'Z' in params if _has_params else True %}

        {% set x_parked = 'x' in _homed_axis %}
        {% set y_parked = 'y' in _homed_axis %}
        {% set z_parked = 'z' in _homed_axis %}

        # Z PARKING LOGIC
        {% if park_z and not z_parked %}
            G28.1 Z
            M400

            {% set z_parked = True %}
        {% else %}
            # Check Z position to avoid damage during XY park
            {% set z_position = printer.toolhead.position.z %}
            {% if z_position is none or z_position <= 5 %}
                {% if z_parked %}
                    # Move bed lower
                    G90
                    G1 Z10 F6000
                    M400
                {% else %}
                    # Park not parked Z
                    G28.1 Z
                    M400

                    {% set z_parked = True %}
                {% endif %}
            {% endif %}
        {% endif %}

        # X PARKING LOGIC
        {% if park_x and not x_parked %}
            G28.1 X
            M400

            {% set x_parked = True %}
        {% endif %}

        # Y PARKING LOGIC
        {% if park_y and not y_parked %}
            # Check X position because of sensors special place
            {% set x_position = printer.toolhead.position.x %}
            {% if x_position is none or x_position < 110 %}
                {% if x_parked %}
                    # Move X to special parking position
                    G90
                    G1 X110 F6000
                    M400
                 {% else %}
                    # Park not parked X
                    G28.1 X
                    M400

                    {% set x_parked = True %}
                {% endif %}
            {% endif %}

            # Now park Y
            G28.1 Y
            M400
        {% endif %}
    {% endif %}

    RESTORE_GCODE_STATE NAME=park_state

[gcode_macro LIST_MOD_PARAMS]
rename_existing: LIST_MOD_PARAMS_BASE
gcode:
    LIST_MOD_PARAMS_BASE

[gcode_macro WAIT]
description: Sleeping macro with waiting included
gcode:
    G4 P{params.TIME|default(1)|float}
    M400

[gcode_macro SHELL]
description: Run shell command
gcode:
    RUN_SHELL_COMMAND CMD="bash" PARAMS='-c "{params.CMD}"'

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set zuse_kamp = printer.mod_params.variables.use_kamp %}
    {% if zuse_kamp == 1 %}
        RESPOND PREFIX="info" MSG="Using KAMP"
        _KAMP_BED_MESH_CALIBRATE
    {% else %}
        RESPOND PREFIX="info" MSG="Using BED_MESH_CALIBRATE"
        _BED_MESH_CALIBRATE {rawparams}
    {% endif %}

[gcode_macro BED_LEVEL_SCREWS_TUNE]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(130)|float %}
    {% set bed_temp = params.BED_TEMP|default(80)|float %}

    RESPOND PREFIX="info" MSG="Don't forget to clean the nozzle using CLEAR_NOZZLE"

    BED_MESH_CLEAR

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}

    {% if bed_temp != 0 %}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
        TEMPERATURE_WAIT SENSOR=heater_bed  MINIMUM={bed_temp-2} MAXIMUM={bed_temp+3}
    {% endif %}

    TEMPERATURE_WAIT SENSOR=extruder  MINIMUM={extruder_temp-2} MAXIMUM={extruder_temp+3}

    G28

    SCREWS_TILT_CALCULATE


[gcode_macro CLEAR_NOZZLE]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(230)|float %}
    {% set bed_temp = params.BED_TEMP|default(80)|float %}

    RESPOND PREFIX="info" MSG="Started stock nozzle cleaning {extruder_temp}/{bed_temp}"

    _PRINT_STATUS S="PREPARE CLEANING..."

    G28

    SAVE_GCODE_STATE NAME=_clear_nozzle

    G90                                     ; Абсолютные координаты 
    M82                                     ; Абсолютные координаты экструдера

    G1 Z5 F3000                             ; Поднимаем стол
    G1 X-20 Y111 F6000                      ; Зависаем по центру

    M400

    LOAD_CELL_TARE                          ; Сбрасываем тензодатчики

    _PRINT_STATUS S="HEATING TO {extruder_temp} / {bed_temp}"

    {% if bed_temp != 0 %}
        M140 S{bed_temp}                    ; Греем стол
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp-3} MAXIMUM={bed_temp+4}
    {% endif %}
    
    M104 S{extruder_temp} T0                ; Греем экструдер
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-2} MAXIMUM={extruder_temp+4}

    {% set zpreclear = printer.mod_params.variables.preclear %}
    {% if zpreclear == 1 %}
        _PRINT_STATUS S="PRECLEAR..."
        _PRE_CLEAR_NOZZLE
    {% endif %}

    _PRINT_STATUS S="CLEANING START SOON"

    LOAD_CELL_TARE                          ; Сбрасываем тензодатчики

    G1 Z3.5 F3000                           ; Lift the nozzle
    G1 X-10 Y109 F6000                      ; Move to Middle-Left position of cleaning area
    _CLEAR_NOZZLE_PROBE VAR=left_pos_probe  ; Saving to use z-offset in _CLEAR_NOZZLE
    
    G1 Z3.5 F3000                           ; Lift the nozzle
    G1 X20 Y109 F6000                       ; Move to Middle-Right position of cleaning area
    _CLEAR_NOZZLE_PROBE VAR=right_pos_probe ; Saving to use z-offset in _CLEAR_NOZZLE

    _PRINT_STATUS S="CLEANING..."

    M106 P0 S255                            ; Start Cooling Fan
    _CLEAR_NOZZLE                           ; Clean move sequence

    _PRINT_STATUS S="COOLING DOWN..."

    M104 S120 T0                            ; Снижаем температуру до 120 градусов
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={118} MAXIMUM={123}

    _PRINT_STATUS S="FINISHING CLEANING..."

    G1 X-20 Y107 F1200                      ; Wipe the nozzle further like Stock firmware do
    G1 Z5 F3000                             ; Now lift the nozzle
    M106 P0 S0                              ; Stop Cooling Fan
    M400

    RESTORE_GCODE_STATE NAME=_clear_nozzle

    LOAD_CELL_TARE                          ; Сбрасываем тензодатчики

    _PRINT_STATUS S="DONE!"

[gcode_macro _CLEAR_NOZZLE_PROBE]
gcode:
    PROBE
    _CLEAR_NOZZLE_SAVE_PROBE VAR={params.VAR}

[gcode_macro _CLEAR_NOZZLE_SAVE_PROBE]
gcode:
    SET_GCODE_VARIABLE MACRO=_CLEAR_NOZZLE VARIABLE={params.VAR} VALUE={printer.probe.last_z_result}

[gcode_macro _CLEAR_NOZZLE]
variable_right_pos_probe: 5
variable_left_pos_probe: 5
gcode:
    G92 E0                                  ; Reset filament counter

    {% set left_z_offset =  printer["gcode_macro _CLEAR_NOZZLE"].left_pos_probe %}
    {% set right_z_offset = printer["gcode_macro _CLEAR_NOZZLE"].right_pos_probe %}
    {% set diff_z_offset =  right_z_offset - left_z_offset %}

    RESPOND PREFIX="info" MSG="Cleaning Z-Offsets:"
    RESPOND PREFIX="" MSG="    {left_z_offset}"
    RESPOND PREFIX="" MSG="    {right_z_offset}"
    RESPOND PREFIX="" MSG="diff: {diff_z_offset}"

    # The wiping zone ranges from -10 to +20. 
    # To prevent bed scratching, 
    # it is necessary to apply a correction for each movement.
    #
    # This correction can be achieved using linear interpolation 
    # between probes of the left and right boundary regions.
    #
    # The correction factor is calculated as: f = (%X - %left) / (%right - %left)
    # For example, for X=20, f = (20 - (-10)) / (20 - (-10)) = 1

    {% set z_offset = 0.15 + left_z_offset + diff_z_offset * 0.0 %}         ; z+0.15
    RESPOND PREFIX="//" MSG="Clean to X: -10, Z: {z_offset}"

    G1 Z3.5 F3000                           ; Lift the nozzle
    G1 X-10 Y111 F3000                      ; Move to start cleaning point
    G1 Z{z_offset} F3000                    ; Apply starting z-offset
    M400

    {% set z_offset = 0.15 + left_z_offset + diff_z_offset * 1.0 %}         ; z+0.15
    RESPOND PREFIX="//" MSG="Clean to X: 20, Z: {z_offset}"

    G1 X20 Z{z_offset} F1200                ; Move right
    G1 Y110 F1200                           ; Move down
    M400
    
    {% set z_offset = 0.15 + left_z_offset + diff_z_offset * 0.34 %}        ; z+0.15
    RESPOND PREFIX="//" MSG="Clean to X: 0, Z: {z_offset}"

    G1 X0 Z{z_offset} F1200                 ; Move left
    G1 Y109 F1200                           ; Move down
    M400

    {% set z_offset = 0.15 + left_z_offset + diff_z_offset * 1.0 %}         ; z+0.15
    RESPOND PREFIX="//" MSG="Clean to X: 20, Z: {z_offset}"
    
    G1 X20 Z{z_offset} F1200                 ; Move right
    G1 Y108 F1200                            ; Move down
    M400

    {% set z_offset = 0.05 + left_z_offset + diff_z_offset * 0 %}           ; z+0.05 (!)
    RESPOND PREFIX="//" MSG="Clean to X: -10, Z: {z_offset}"

    G1 X-10 Z{z_offset}                     ; Move Left
    M400

[gcode_macro _START_PRECLEAR]
gcode:
    G28
    _PRE_CLEAR_NOZZLE

[gcode_macro _PRE_CLEAR_NOZZLE]
gcode:
    RESPOND PREFIX="info" MSG="Pre-cleaning of the nozzle"

    # wipe to left
    G90                     ; absolute coordinates
    G1 X80 Y110 Z5 F18000   ; get into position
    PROBE                   ; moove nozzle to bed
    G91                     ; relative position
    G1 X-40 F900            ; wipe move left

    # up
    G90
    G1 Z3 F3000

    # wipe to right
    G90                     ; absolute coordinates
    G1 X-80 Y110 Z5 F18000  ; get into position
    PROBE                   ; moove nozzle to bed
    G91                     ; relative position
    G1 X40 F900             ; wipe move right

    G90
    G1 X-20 Y111 F6000      ; Move to the clean area center
    G1 Z5 F3000
    M400

    RESPOND PREFIX="info" MSG="Pre-cleaning finished"

[gcode_macro _FULL_BED_LEVEL]
description: Bed calibration without disabling heater
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(240)|float %}
    {% set bed_temp = params.BED_TEMP|default(80)|float %}
    {% set profile = params.PROFILE|default("auto") %}

    RESPOND PREFIX="info" MSG="Bed mesh calibrate. Profile: {profile}. {extruder_temp}/{bed_temp}"

    BED_MESH_CLEAR          ; Очистка профиля стола
    M400

    CLEAR_NOZZLE EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}

    _PRINT_STATUS S="LEVELING..."

    # Начинаем калибровку
    _BED_MESH_CALIBRATE PROFILE="{profile}"

    G1 X100 Y105            ; Угоняем в угол
    G1 Z10 F3000

    M106 S0                 ; Отключить кулер
    M107                    ; Отключить кулер экструдера

[gcode_macro AUTO_FULL_BED_LEVEL]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(240)|float %}
    {% set bed_temp = params.BED_TEMP|default(80)|float %}
    {% set profile = params.PROFILE|default("auto") %}

    _FULL_BED_LEVEL EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp} PROFILE={profile}

    # Выклчюаем обогрев
    _STOP

# Калибровка PID стола
[gcode_macro M357]
description: Calibrate Bed PID
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET={params.E|default(80)|int}
    NEW_SAVE_CONFIG


[gcode_macro PID_TUNE_BED]
description: Calibrate Bed PID
gcode:
    {% set temperature = params.TEMPERATURE|default(80) %}
    G28

    M107
    PID_CALIBRATE HEATER=heater_bed TARGET={temperature}

    NEW_SAVE_CONFIG


# Калибровка PID экструдера
[gcode_macro PID_TUNE_EXTRUDER]
description: Calibrate extruder PID
gcode:
    {% set temperature = params.TEMPERATURE|default(245) %}
    G28

    G1 X0 Y0 F6000
    M107

    PID_CALIBRATE HEATER=extruder TARGET={temperature}
    NEW_SAVE_CONFIG


[gcode_macro LOAD_FILAMENT]
variable_load_distance:  125
gcode:
    {% set speed = params.SPEED|default(450) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}

    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{speed} ; extrude with 7.5mm/s
    M400
    RESTORE_GCODE_STATE NAME=load_state

    BEEP

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  75
gcode:
    {% set speed = params.SPEED|default(450) %}

    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E-{unload_distance} F{speed} ; unload
    M400
    RESTORE_GCODE_STATE NAME=unload_state

    BEEP

[gcode_macro PURGE_FILAMENT]
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(450) %}

    SAVE_GCODE_STATE NAME=purge_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed}   ; purge
    M400
    RESTORE_GCODE_STATE NAME=purge_state

    BEEP

[gcode_macro LOAD_MATERIAL]
description: Manual filament loading / change
variable_initial_target_temp: 0
gcode:
    # save gcode state
    SAVE_GCODE_STATE NAME=load_material_state
    # save heating state
    SET_GCODE_VARIABLE MACRO=LOAD_MATERIAL VARIABLE=initial_target_temp VALUE={printer["extruder"].target}

    _LOAD_MATERIAL_SELECT

[gcode_macro _LOAD_MATERIAL_SELECT]
gcode:
    {% if printer["extruder"].target < printer.configfile.settings['extruder'].min_extrude_temp %}
        # material selection
        RESPOND TYPE=command MSG="action:prompt_begin Material Selection"
        RESPOND TYPE=command MSG="action:prompt_text Select the material type to heat the nozzle."
        RESPOND TYPE=command MSG="action:prompt_button_group_start"
        RESPOND TYPE=command MSG="action:prompt_button PLA|_LOAD_MATERIAL_HEATUP TEMP=220|primary"
        RESPOND TYPE=command MSG="action:prompt_button PETG|_LOAD_MATERIAL_HEATUP TEMP=250|primary"
        RESPOND TYPE=command MSG="action:prompt_button ABS|_LOAD_MATERIAL_HEATUP TEMP=260|primary"
        RESPOND TYPE=command MSG="action:prompt_button_group_end"
        RESPOND TYPE=command MSG="action:prompt_footer_button Abort|_LOAD_MATERIAL_END"
        RESPOND TYPE=command MSG="action:prompt_show"
    {% else %}
        # skip preheating dialog, but wait for target temp
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={printer["extruder"].target}
        _LOAD_MATERIAL_ACTION
    {% endif %}

[gcode_macro _LOAD_MATERIAL_HEATUP]
gcode:
    {% set extruder_temp = params.TEMP|default(200)|float %}
    M104 S{extruder_temp}
    RESPOND TYPE=command MSG=action:prompt_end
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
    BEEP
    _LOAD_MATERIAL_ACTION

[gcode_macro _LOAD_MATERIAL_ACTION]
gcode:
    # loading / unloading
    RESPOND TYPE=command MSG="action:prompt_begin Filament Loading"
    RESPOND TYPE=command MSG="action:prompt_text Select filament loading action."
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Load|LOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Unload|UNLOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Purge|PURGE_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Done|_LOAD_MATERIAL_END"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _LOAD_MATERIAL_END]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"
    # restore old temp
    M104 S{printer["gcode_macro LOAD_MATERIAL"].initial_target_temp}
    # restore gcode state
    RESTORE_GCODE_STATE NAME=load_material_state

[gcode_macro M600]
description: Pause and Filament switching
gcode:
    {% set X = "X=" ~ params.X|float if params.X is defined else "" %}
    {% set Y = "Y=" ~ params.Y|float if params.Y is defined else "" %}
    {% set Z = "Z=" ~ params.Z|float if params.Z is defined else "" %}

    PAUSE { X } { Y } { Z }
    M400

    RESPOND TYPE=command MSG="action:prompt_begin Filament change"
    RESPOND TYPE=command MSG="action:prompt_text Filament change requested. Please load new filament and press resume."
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Load|LOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Unload|UNLOAD_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button Purge|PURGE_FILAMENT|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Resume|_INTERACTIVE_LOAD_END"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _INTERACTIVE_LOAD_END]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"
    RESUME


[gcode_macro SHUTDOWN]
description: Выключить принтер
gcode:
    BED_MESH_CLEAR
    M400
    # Reset button state, otherwise only one trigger can occur
    SET_PIN PIN=clear_power_off VALUE=1
    # There is a deboucing circuit which needs some delay
    WAIT TIME=500
    # Disable pin again otherwise on reset the button will be triggered 1-3 times
    SET_PIN PIN=clear_power_off VALUE=0
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=poweroff

[gcode_macro REBOOT]
description: Reboot printer
gcode:
    BED_MESH_CLEAR
    M400
    # Reset button state, otherwise only one trigger can occur
    SET_PIN PIN=clear_power_off VALUE=1
    # There is a deboucing circuit which needs some delay
    WAIT TIME=500
    # Disable pin again otherwise on reset the button will be triggered 1-3 times
    SET_PIN PIN=clear_power_off VALUE=0
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=reboot


[gcode_macro REMOVE_ZMOD]
description: Remove mod
gcode:
    RUN_SHELL_COMMAND CMD=ztouch PARAMS="/opt/config/mod/REMOVE_ZMOD"
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=reboot

[gcode_macro SKIP_ZMOD]
description: Reboot to stock firmware. Skipping mod loading
gcode:
    RUN_SHELL_COMMAND CMD=ztouch PARAMS="/opt/config/mod/SKIP_ZMOD"
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=reboot

[gcode_macro SKIP_ZMOD_SOFT]
description: Reboot to stock firmware. Skipping mod loading, but with ssh service
gcode:
    RUN_SHELL_COMMAND CMD=ztouch PARAMS="/opt/config/mod/SKIP_ZMOD_SOFT"
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=reboot


[gcode_macro SOFT_REMOVE]
description: Remove mode, but leave root, audio, md5
gcode:
    RUN_SHELL_COMMAND CMD=ztouch PARAMS="/opt/config/mod/SOFT_REMOVE_ZMOD"
    RUN_SHELL_COMMAND CMD=sync
    RUN_SHELL_COMMAND CMD=reboot

[gcode_macro LED_ON]
description: Turn on LED
gcode:
    SET_LED LED=chamber_light WHITE=1

[gcode_macro LED_OFF]
description: Turn off LED
gcode:
    SET_LED LED=chamber_light WHITE=0

[gcode_macro LED]
description: Turn on LED with selected brightness
gcode:
    {% set S = params.S|default(50)|int %}
    SET_LED LED=chamber_light WHITE={S/100|float}

[gcode_macro MEM]
description: Print memory usage
gcode:
    RUN_SHELL_COMMAND CMD=zmem

[gcode_macro AIR_CIRCULATION_INTERNAL]
description: Turn on internal air circulation
gcode:
    SET_FAN_SPEED FAN=external_fan SPEED=0
    SET_FAN_SPEED FAN=internal_fan SPEED=1
    SET_SERVO SERVO=my_servo ANGLE=95

[gcode_macro AIR_CIRCULATION_EXTERNAL]
description: Turn on external air circulation
gcode:
    SET_FAN_SPEED FAN=external_fan SPEED=.8 ;dropped to 80 percent to quiet it down
    SET_FAN_SPEED FAN=internal_fan SPEED=1
    SET_SERVO SERVO=my_servo ANGLE=180

[gcode_macro AIR_CIRCULATION_STOP]
description: Turn off air circulation
gcode:
    SET_FAN_SPEED FAN=external_fan SPEED=0
    SET_FAN_SPEED FAN=internal_fan SPEED=0
    SET_SERVO SERVO=my_servo ANGLE=95

[gcode_macro PLAY_MIDI]
description: Play midi
gcode:
    {% if printer.mod_params.variables.sound %}    
        {% set FILE = params.FILE|default("For_Elise.mid")|string %}
        RUN_SHELL_COMMAND CMD=audio_midi PARAMS="{FILE}"
    {% endif %}

[gcode_macro CAMERA_RELOAD]
description: Reload camera parameters
gcode:
    RUN_SHELL_COMMAND CMD=S98camera PARAMS="reload"

[gcode_macro DATE_GET]
description: Print time
gcode:
    {% set DT  = params.DT|default("")|string %}
    RUN_SHELL_COMMAND CMD=date

[gcode_macro DATE_SET]
description: Set date-time in format: 2024.01.01-00:00:00
gcode:
    {% set DT  = params.DT|default("2024.01.01-00:00:00")|string %}
    RUN_SHELL_COMMAND CMD=date PARAMS="date {DT}"

[gcode_macro WEB]
description: Switch default WebUI: fluidd/mainsail
gcode:
    RUN_SHELL_COMMAND CMD=zhttp PARAMS="switch"
    RESPOND PREFIX="info" MSG="Done!"

[gcode_macro _G17]
gcode:
    RESPOND PREFIX="info" MSG="Replace Spiral/Automatic Z-Hop. The printer does not support it."
    RESPOND PREFIX="info" MSG="In Orca. Printer profile -> Extruder 1 -> Type of Z-axis lift. Set to Normal or Inclined"

[gcode_macro G17]
gcode:
    _G17

[gcode_macro G18]
gcode:
    _G17

[gcode_macro G19]
gcode:
    _G17

[gcode_macro _STOP]
description: Disable heating and extruder fan
gcode:
    M400
    M220 S100               ; Скорость 100%
    M221 S100               ; Экструзия 100%
    M140 S0                 ; Отключить нагрев стола
    M104 S0                 ; Отключить нагрев экструдера
    M106 S0                 ; Отключить кулер
    M107                    ; Отключить кулер экструдера
    SET_SKEW CLEAR=1        ; reset skew profile if loaded

    {% set zmidi_end = printer.mod_params.variables.midi_end %}
    {% if zmidi_end != "" %}
        PLAY_MIDI FILE={zmidi_end}
    {% endif %}
    EXCLUDE_OBJECT_DEFINE RESET=1

    RESPOND PREFIX="info" MSG="The printing is finished"

[gcode_macro ZSHAPER]
description: Shaper calibrate
gcode:
    RUN_SHELL_COMMAND CMD=zshaper PARAMS="--clear"

    G28  ; Homing the printer

    SHAPER_CALIBRATE  ; Starting the input shaper calibration process

    RESPOND PREFIX="" MSG="You can find shaper calibration in Configuration -> mod_data."
    RESPOND PREFIX="" MSG="Download the CSV files from there."
    RESPOND PREFIX="" MSG="Use the program for generating plots."
    RESPOND PREFIX="" MSG="https://github.com/theycallmek/Klipper-Input-Shaping-Assistant/releases"

    {% set scv = printer.toolhead.square_corner_velocity %}
    RESPOND PREFIX="" MSG="Plots will be generated for Jerk = {scv} mm/s²"
    RUN_SHELL_COMMAND CMD=zshaper PARAMS="--calculate"
    RESPOND PREFIX="" MSG="Images are located in the Configuration -> mod_data tab. They are named calibration_data_x.png and calibration_data_y.png."


[gcode_macro SET_TIMEZONE]
description: Change timezone
gcode:
    {% set ZONE  = params.ZONE|default("Europe/Moscow")|string %}
    RESPOND PREFIX="info" MSG="Usage: SET_TIMEZONE ZONE=Asia/Yekaterinburg"
    RUN_SHELL_COMMAND CMD=rm PARAMS="/etc/localtime"
    RUN_SHELL_COMMAND CMD=ln PARAMS="-s /usr/share/zoneinfo/{ZONE} /etc/localtime"
    RUN_SHELL_COMMAND CMD=date

[include ./KAMP/KAMP_Settings.cfg]

[gcode_macro KAMP]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(240)|float %}
    {% set bed_temp = params.BED_TEMP|default(80)|float %}

    BED_MESH_CLEAR          ; Очистка профиля стола

    CLEAR_NOZZLE EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}

    _PRINT_STATUS S="KAMP LEVELING..."

    _KAMP_BED_MESH_CALIBRATE

    M106 S0                 ; Отключить кулер
    M107                    ; Отключить кулер экструдера

    G1 X100 Y105            ; Угоняем в угол
    G1 Z10 F3000
    M400

    _PRINT_STATUS S="WAIT FOR TEMPERATURE..."

    M190 S{bed_temp}
    M109 S{extruder_temp}


[gcode_macro TAR_CONFIG]
description: Creates archive with debug information
gcode:
    RUN_SHELL_COMMAND CMD=tar PARAMS="-cf /opt/config/mod_data/config.tar --exclude ssh.key --exclude .git --exclude .shell --exclude config.tar /opt/klipper/klippy/toolhead.py /opt/config/ /data/logFiles/zmod.log /data/logFiles/zmod.log.1 /data/logFiles/zmod.log.2 /data/logFiles/zmod.log.3 /data/logFiles/zmod.log.4 /data/logFiles/zmod.log.5 /data/logFiles/firmwareExe.log /data/logFiles/meminfo.complete.log /data/logFiles/printer.log /data/logFiles/ssh.log /data/logFiles/moonraker.log /data/logFiles/ffstartup-arm.log /data/logFiles/dmesg.complete.log"
    RESPOND PREFIX="info" MSG="Download archive from 'Configuration' -> 'mod_data' -> config.tar"

[gcode_macro STOP_ZMOD]
description: Stop fluidd/mainsail and moonraker
gcode:
    RUN_SHELL_COMMAND CMD=S99root PARAMS="stop"

[gcode_macro START_ZMOD]
description: Start fluidd/mainsail and moonraker after STOP_ZMOD
gcode:
    RUN_SHELL_COMMAND CMD=S99root PARAMS="start"

[gcode_macro TEST_EMMC]
description: Test internal storage speed
gcode:
    {% set size    = params.SIZE|default(100)|int %}
    {% set path    = params.PATH|default("/data")|string %}

    RESPOND PREFIX="info" MSG="Speed test started. Please wait until it finishes."
    RESPOND PREFIX="info" MSG="Don't reload the page!"

    RUN_SHELL_COMMAND CMD=zfs PARAMS="{path} {size} NO_PROGRESS"

[gcode_macro CLEAR_EMMC]
description: Clean internal storage
gcode:
    {% set log    = params.LOG|default(1)|int %}
    {% set any    = params.ANY|default(0)|int %}

    RUN_SHELL_COMMAND CMD=zclear PARAMS="{log} {any}"

[gcode_macro ZSSH_RELOAD]
description: Starting SSH tunnel if it is not running
gcode:
    RUN_SHELL_COMMAND CMD=S98zssh PARAMS="reload"

[gcode_macro CONFIG_BACKUP]
description: Starting configuration backup
gcode:
    {% set dry     = params.DRY|default(0)|int %}
    {% set verbose = params.VERBOSE|default(0)|int %}
    RUN_SHELL_COMMAND CMD=zbackup PARAMS="--backup --dry {dry} --verbose {verbose}"

[gcode_macro CONFIG_RESTORE]
description: Starting configuration backup restoration
gcode:
    {% set dry     = params.DRY|default(0)|int %}
    {% set verbose = params.VERBOSE|default(0)|int %}
    RUN_SHELL_COMMAND CMD=zbackup PARAMS="--restore --dry {dry} --verbose {verbose}"

[gcode_macro CONFIG_VERIFY]
description: Starting configuration verification from backup
gcode:
    {% set verbose = params.VERBOSE|default(0)|int %}
    RUN_SHELL_COMMAND CMD=zbackup PARAMS="--verify --verbose {verbose}"

[gcode_macro BACKUP_TAR]
description: Starting mod configuration backup creation
gcode:
    RUN_SHELL_COMMAND CMD=zbackup PARAMS="--tar-backup 0 {verbose}"


[gcode_macro _CLEAR1]
description: Cleaning like Orca do
gcode:
    G90
    M83
    G1 Z5 F6000
    G1 E-0.2 F800
    G1 X110 Y-110 F6000
    G1 E2 F800
    G1 Y-110 X55 Z0.25 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G1 Y-110 X55 Z0.45 F4800
    G1 X-55 E8 F2400
    G1 Y-109.6 F2400
    G1 X55 E5 F2400
    G92 E0

[gcode_macro _CLEAR2]
description: Cleaning recommended by FlashForge community
gcode:
    G90
    M83
    G1 E-0.2 F800
    G1 X110 Y-110 Z5 F6000
    G1 Z0.2 F1200
    G1 E2 F800
    G1 X20 E9 F1000
    G1 X-60 E12.5 F1000
    G1 E-0.2 F800
    G92 E0

[gcode_macro _CLEAR3]
description: Variation of cleaning by FlashForge community
gcode:
    G90
    M83
    G1 Y-110 X80 Z0.2 F4800
    G1 X20 E9 F1000 ; intro line
    G1 X-60 E12.5 F1000 ; intro line
    G92 E0

[gcode_macro _CLEAR4]
description: Schrader clear code from top to bottom on the right
gcode:
    G90
    M83
    G1 Z5 F6000
    G1 E-1.5 F800
    G1 X110 Y41 F6000
    G1 E2 F800
    G1 Y41 Z0.2 F4800
    G1 Y-39 E9 F1000 ; intro line
    G1 Y-99 E12.5 F1000 ; intro line
    G92 E0

[gcode_macro _START_MESH]
gcode:
    {% set extruder_temp = printer["gcode_macro _START_PRINT"].zextruder_temp|float %}  ; extruder temp, usually set by slicer
    {% set bed_temp = printer["gcode_macro _START_PRINT"].zbed_temp|float %}            ; bed temp, usually set by slicer
    {% set skip_leveling = printer["gcode_macro _START_PRINT"].zskip_leveling %}        ; Do not generate a bed map
    {% set force_kamp = printer["gcode_macro _START_PRINT"].zforce_kamp %}              ; if True it forces the KAMP bed level process
    {% set force_leveling = printer["gcode_macro _START_PRINT"].zforce_leveling %}      ; if True it forces the bed level process
    {% set mesh = printer["gcode_macro _START_PRINT"].zmesh %}                          ; Name of the bed map profile

    {%if not skip_leveling %}
        {%if force_kamp %}
            RESPOND PREFIX="//" MSG="KAMP is initiated SKIP_LEVELING={skip_leveling} FORCE_KAMP={force_kamp}"
            KAMP BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
        {% else %}
            {%if (not printer['bed_mesh'].profile_name) or force_leveling %}
                {% if mesh != "" %}
                    RESPOND PREFIX="!!" MSG="Bed map {mesh} is being generated as it was not found"
                    RESPOND PREFIX="!!" MSG="Save it AFTER the print"
                    _PRINT_STATUS S="MISSING MESH. LEVELING..."

                    _FULL_BED_LEVEL BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp} PROFILE={mesh}
                {% else %}
                    {%if force_leveling %}
                        RESPOND PREFIX="info" MSG="Generating bed map (FORCE_LEVELING={force_leveling})"
                    {% else %}
                        RESPOND PREFIX="info" MSG="Generating bed map automatically as no map is loaded"
                    {% endif %}
                    _PRINT_STATUS S="FORCE LEVELING"

                    _FULL_BED_LEVEL BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
                {% endif %}
            {% endif %}
            {% set cur_mesh = printer['bed_mesh'].profile_name %}
            RESPOND PREFIX="//" MSG="No need to generate a bed map. Profile {cur_mesh} is loaded."
        {% endif %}
    {% else %}
        RESPOND PREFIX="//" MSG="Bed map generation is skipped. SKIP_LEVELING={skip_leveling}"
    {% endif %}

[gcode_macro _START_PRINT]
description: Replacement for the standard start G-code
variable_zextruder_temp: 245.0
variable_zbed_temp: 80.0
variable_zforce_kamp: False
variable_zforce_leveling: False
variable_zskip_leveling: False
variable_zskip_zoffset: False
variable_zzoffset: 0.0
variable_zmesh: ""
variable_print_prepare_status: 0
gcode:
    {% set force_kamp = printer["gcode_macro _START_PRINT"].zforce_kamp %}              ; if True it forces the KAMP bed level process
    {% set extruder_temp = printer["gcode_macro _START_PRINT"].zextruder_temp|float %}  ; extruder temp, usually set by slicer
    {% set bed_temp = printer["gcode_macro _START_PRINT"].zbed_temp|float %}            ; bed temp, usually set by slicer
    {% set force_leveling = printer["gcode_macro _START_PRINT"].zforce_leveling %}      ; if True it forces the bed level process
    {% set zoffset = printer["gcode_macro _START_PRINT"].zzoffset %}                    ; Set Z offset
    {% set skip_zoffset = printer["gcode_macro _START_PRINT"].zskip_zoffset %}          ; Skip Z offset for prints initiated from the native screen
    {% set skip_leveling = printer["gcode_macro _START_PRINT"].zskip_leveling %}        ; Do not generate a bed map
    {% set mesh = printer["gcode_macro _START_PRINT"].zmesh %}                          ; Name of the bed map profile

    {% set check_md5 = printer.mod_params.variables.check_md5 %}
    {% set disable_priming = printer.mod_params.variables.disable_priming %}
    {% set disable_skew = printer.mod_params.variables.disable_skew %}
    {% set load_zoffset = printer.mod_params.variables.load_zoffset %}
    {% set zclear = printer.mod_params.variables.zclear %}
    {% set zuse_kamp = printer.mod_params.variables.use_kamp %}

    # Cancel all delayed commands to avoid interfering with the print process
    UPDATE_DELAYED_GCODE ID=_STOP_MOTOR DURATION=0
    UPDATE_DELAYED_GCODE ID=_AUTO_REBOOT DURATION=0

    _PRINT_STATUS S="PREPARING..."

    CAMERA_RELOAD
    ZSSH_RELOAD

    {% set screen = printer.mod_params.variables.display_off == False %}
    {% if screen == True %}
        RESPOND PREFIX="info" MSG="Native screen is being used"
    {% else %}
        RESPOND PREFIX="info" MSG="Screen is not being used"
    {% endif %}

    RESPOND PREFIX="info" MSG="START_PRINT BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp} FORCE_LEVELING={force_leveling} FORCE_KAMP={force_kamp} Z_OFFSET={zoffset} SKIP_ZOFFSET={skip_zoffset} SKIP_LEVELING={skip_leveling} MESH={mesh}"
    RESPOND PREFIX="info" MSG="Extruder temperature: {extruder_temp}"
    RESPOND PREFIX="info" MSG="Bed temperature: {bed_temp}"

    {% set preparation_done = printer["gcode_macro START_PRINT"].preparation_done %}
    {%if preparation_done == False and check_md5 == 1 %}
        _PRINT_STATUS S="MD5 CHECK"

        RESPOND PREFIX="info" MSG="Launching MD5 checksum verification"
        CHECK_MD5
    {% endif %}

    _PRINT_STATUS S="PREHEATING..."
    
    M140 S{bed_temp}        ; start bed heating
    SET_SKEW CLEAR=1        ; reset skew profile if loaded

    {% if load_zoffset %}
        RESPOND PREFIX="info" MSG="Global Z-Offset management is used. SKIP_ZOFFSET and Z_OFFSET parameters are ignored"
        LOAD_GCODE_OFFSET
    {% else %}
        {%if skip_zoffset %}
            RESPOND PREFIX="info" MSG="Skipping Z-offset setup, SKIP_ZOFFSET={skip_zoffset}"
        {% else %}
            RESPOND PREFIX="info" MSG="Setting Z-offset to {zoffset}, SKIP_ZOFFSET={skip_zoffset}"
            SET_GCODE_OFFSET Z={zoffset}
        {% endif %}
    {% endif %}

    _PRINT_STATUS S="HOMING..."
    G28

    {% set zprint_leveling = printer.mod_params.variables.print_leveling %}
    {% if zprint_leveling %}
        {% if not screen %}
            BED_MESH_CLEAR
            
            {% if zuse_kamp %}
                RESPOND PREFIX="info" MSG="Using KAMP from global parameters."
                _PRINT_STATUS S="KAMP"

                KAMP BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
            {% else %}
                RESPOND PREFIX="info" MSG="Full bed map generation in progress."
                
                _FULL_BED_LEVEL BED_TEMP={bed_temp} EXTRUDER_TEMP={extruder_temp}
            {% endif %}
        {% endif %}

        RESPOND PREFIX="//" MSG="All START_PRINT parameters for bed map generation are ignored"
    {% else %}
        {% if mesh != "" %}
            RESPOND PREFIX="info" MSG="Attempting to load bed map {mesh}"
            BED_MESH_CLEAR
            
            {% if mesh in printer['bed_mesh'].profiles %}
                BED_MESH_PROFILE LOAD={mesh}
                RESPOND PREFIX="info" MSG="Bed map {mesh} has been loaded"
            {% endif %}
        {% endif %}

        _START_MESH
    {% endif %}

    G90                     ; use absolute coordinates
    G1 Z10 F1800            ; move the nozzle near the bed

    _PRINT_STATUS S="WAIT FOR TEMPERATURE..."

    # wait for bed to reach temp, no wait for stabilization
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp}
    M109 S{extruder_temp}   ; set and wait for nozzle to reach temperature

    {% set zmidi_start = printer.mod_params.variables.midi_start %}
    {% if zmidi_start != "" %}
        PLAY_MIDI FILE={zmidi_start}
    {% endif %}

    # Reset the load cell for proper operation of the nozzle hit failsafe feature
    LOAD_CELL_TARE

    {% if disable_priming %}
        RESPOND PREFIX="info" MSG="Nozzle cleaning line is disabled. DISABLE_PRIMING={disable_priming}"
    {% else %}
        RESPOND PREFIX="info" MSG="Cleaning nozzle with a priming line"

        {% if zuse_kamp or force_kamp %}
            RESPOND PREFIX="info" MSG="Algorithm: LINE_PURGE"
            _PRINT_STATUS S="KAMP PRIMING..."

            LINE_PURGE
        {% else %}
            RESPOND PREFIX="info" MSG="Algorithm: {zclear}"
            _PRINT_STATUS S="PRIMING..."

            {zclear}
        {% endif %}

        M400
    {% endif %}

    # Load skew profile
    {% if not disable_skew %}
        RESPOND PREFIX="info" MSG="Loading skew_profile"
        SKEW_PROFILE LOAD=skew_profile
    {% endif %}

    _PRINT_STATUS S="PRINTING..."

[gcode_macro NEW_SAVE_CONFIG]
description: Сохранить параметры, без зависания родного экрана
gcode:
    {% set znew_save_config = printer.mod_params.variables.new_save_config %}
    {% if znew_save_config == 1 %}
        SAVE_CONFIG
    {% else %}
        {% set screen = printer.mod_params.variables.display_off == False %}
        {% if not screen %}
            SAVE_CONFIG
        {% else %}
            RESPOND PREFIX="info" MSG="Alrarnative realiztion of SAVE_CONFIG"
            RUN_SHELL_COMMAND CMD=restart_klipper
        {% endif %}
    {% endif %}

[delayed_gcode _STOP_MOTOR]
gcode:
    RESPOND PREFIX="info" MSG="Servos turned off"
    M84                     ; Выключить мотор

[delayed_gcode _GOTO_PAUSE]
gcode:
    G1 Y108 F7800
    G1 X108 F7800

[gcode_macro _MAYBE_AUTO_REBOOT]
variable_active: False
gcode:
    {% set zauto_reboot = printer.mod_params.variables.auto_reboot %}
    {% if zauto_reboot != 0 %}
      RESPOND PREFIX="info" MSG="Automatic reboot after 1.5 minutes"
      RESPOND PREFIX="info" MSG="For cancell run: _CANCEL_AUTO_REBOOT"

      SET_GCODE_VARIABLE MACRO=_MAYBE_AUTO_REBOOT VARIABLE=active VALUE=True
      UPDATE_DELAYED_GCODE ID=_AUTO_REBOOT DURATION=90
    {% endif %}

[gcode_macro _CANCEL_AUTO_REBOOT]
gcode:
    {% set active = printer["gcode_macro _MAYBE_AUTO_REBOOT"].active %}
    {% if active %}
        UPDATE_DELAYED_GCODE ID=_AUTO_REBOOT DURATION=0
        RESPOND PREFIX="info" MSG="Automatic reboot canclelled"
        SET_GCODE_VARIABLE MACRO=_MAYBE_AUTO_REBOOT VARIABLE=active VALUE=False
    {% endif %}

[delayed_gcode _AUTO_REBOOT]
gcode:
    SET_GCODE_VARIABLE MACRO=_MAYBE_AUTO_REBOOT VARIABLE=active VALUE=False

    {% set zauto_reboot = printer.mod_params.variables.auto_reboot %}
    {% set screen = printer.mod_params.variables.display_off == False %}

    {% if zauto_reboot == 1 %}
        REBOOT
    {% elif zauto_reboot == 1 %}
        {% if screen == False %}
            FIRMWARE_RESTART
        {% else %}
            RESPOND PREFIX="info" MSG="Firmware reboot will cause the printer to hang"
            RESPOND PREFIX="info" MSG="This mode is supported only with the screen turned off"
            GET_MOD_PARAM PARAM="auto_reboot"
        {% endif %} 
    {% endif %}

[delayed_gcode start_services]
initial_duration: 30
gcode:
    UPDATE_DELAYED_GCODE ID=start_services DURATION=0
    
    RUN_SHELL_COMMAND CMD=S98zssh PARAMS="start"
    UPDATE_DELAYED_GCODE ID=keep_alive_zssh DURATION=180

[delayed_gcode keep_alive_zssh]
gcode:
    {% if printer.mod_params.variables.zssh %}
        {% if printer.idle_timeout.state != "Printing" %}
        ZSSH_RELOAD
        {% endif %}
        UPDATE_DELAYED_GCODE ID=keep_alive_zssh DURATION=180
    {% endif %}

[gcode_macro _COLDPULL_LOAD_MATERIAL_END]
gcode:
    RESPOND TYPE=command MSG="action:prompt_end"


[gcode_macro _COLDPULL_LOAD_MATERIAL]
gcode:
    RESPOND TYPE=command MSG=action:prompt_end

    G28

    G90
    G1 X0 Y0 F7800
    M400

    {% set extruder_temp = params.TEMP|default(245)|float %}
    RESPOND PREFIX="info" MSG="Waiting for the nozzle to heat up to {extruder_temp} degrees"
    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp} MAXIMUM={extruder_temp+10}

    RESPOND PREFIX="info" MSG="Extruding 10 cm of filament"
    G1 E100 F100
    M400

    {% set cold_temp = params.COLD|default(245)|float %}
    RESPOND PREFIX="info" MSG="Cooling down to {cold_temp} degrees"
    M104 S{cold_temp}
    M106 P0 S255
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={cold_temp-2} MAXIMUM={cold_temp+2}
    BEEP

    RESPOND PREFIX="info" MSG="Pulling the filament back"
    G1 E-70 F1500
    M400

    RESPOND PREFIX="info" MSG="Manually remove the remaining filament"
    M107
    M104 S0


[gcode_macro COLDPULL]
description: Cold pull (nozzle cleaning) without violence.
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Select material for loading"
    RESPOND TYPE=command MSG="action:prompt_text Choose the material to clean the nozzle."
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button PETG|_COLDPULL_LOAD_MATERIAL TEMP=250 COLD=100|primary"
    RESPOND TYPE=command MSG="action:prompt_button ABS|_COLDPULL_LOAD_MATERIAL TEMP=260 COLD=105|primary"
    RESPOND TYPE=command MSG="action:prompt_button NYLON|_COLDPULL_LOAD_MATERIAL TEMP=265 COLD=120|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|_COLDPULL_LOAD_MATERIAL_END"
    RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro SET_GCODE_OFFSET]
description: Сохранение Z-Offset
rename_existing: _SET_GCODE_OFFSET
gcode:
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {% set z_offset = printer.mod_params.variables.z_offset %}
    {% if 'Z' in params %}
        {% set z_offset = params.Z|float %}
    {% endif %}

    {% if 'Z_ADJUST' in params %}
        {% set z_adj = params.Z_ADJUST|float %}
        {% set z_offset = z_offset + z_adj %}
    {% endif %}

    {% if z_offset != printer.mod_params.variables.z_offset %}
        SET_MOD_PARAM PARAM="z_offset" VALUE='{z_offset}'
    {% endif %}

[gcode_macro LOAD_GCODE_OFFSET]
description: Restoring Z-Offset
gcode:
    {% set z_offset = printer.mod_params.variables.z_offset %}
    _SET_GCODE_OFFSET Z='{z_offset}'
    { action_respond_info("Z-Offset set from global parameters: %s" % (z_offset)) }


[gcode_macro SET_FAN_SPEED]
description: Управление вентиляторами
rename_existing: _SET_FAN_SPEED
gcode:
    {% set fan = params.FAN|string %}
    {% if fan != 'pcb_fan' %}
        _SET_FAN_SPEED {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}
    {% endif %}

[gcode_macro MOVE_SAFE]
description: Safe move with boundary check
gcode:
  {% set e_move = "E" ~ params.E if params.E is defined else "" %}
  {% set rate   = "F" ~ params.F if params.F is defined else "" %}
  
  {% set ABSOLUTE = params.ABSOLUTE | default(0) | int != 0 %}
  {% set ABSOLUTE_E = params.ABSOLUTE_E | default(0) | int != 0 %}
  SAVE_GCODE_STATE NAME=_client_movement

  {% if x_move or y_move or z_move %}
    G90
  {% endif %}

  {% if e_move %}
    M8{ 2 if ABSOLUTE_E else 3 }
  {% endif %}

  # Overridee since real min/max is for parking only!
  {% set min = {'x': -110, 'y': -110, 'z': 0} %} 
  {% set max = {'x': 110, 'y': 110, 'z': 220} %}

  {% if ABSOLUTE %}
    {% set x_move = 'X' ~ ([[params.X|float, max.x]|min, min.x]|max) if params.X is defined else "" %}
    {% set y_move = 'Y' ~ ([[params.Y|float, max.y]|min, min.y]|max) if params.Y is defined else "" %}
    {% set z_move = 'Z' ~ ([[params.Z|float, max.z]|min, min.z]|max) if params.Z is defined else "" %}
  {% else %}
    {% set pos = printer.toolhead.position %}
    {% set x_move = 'X' ~ ([[pos.x + params.X|float, max.x]|min, min.x]|max) if params.X is defined else "" %}
    {% set y_move = 'Y' ~ ([[pos.y + params.Y|float, max.y]|min, min.y]|max) if params.Y is defined else "" %}
    {% set z_move = 'Z' ~ ([[pos.z + params.Z|float, max.z]|min, min.z]|max) if params.Z is defined else "" %}
  {% endif %}

  G1 { x_move } { y_move } { z_move } { e_move } { rate }
  RESTORE_GCODE_STATE NAME=_client_movement

[gcode_macro _CLIENT_LINEAR_MOVE]
description: Linear move with save and restore of the gcode state
gcode:
    MOVE_SAFE {rawparams}

[gcode_macro SET_LED]
rename_existing: _SET_LED
gcode:
    {% if params.LED == "chamber_led" %}
        {% set disable_screen_led = printer.mod_params.variables.disable_screen_led %}
        {% if not disable_screen_led %}
            _SET_LED LED=chamber_light WHITE="{params.WHITE}"
        {% endif %}
    {% else %}
        _SET_LED {% for p in params %} {'%s=%s ' % (p, params[p])} {% endfor %}
    {% endif %}

[gcode_macro _PRINT_STATUS]
gcode:
    RESPOND PREFIX="//" MSG="State: {params.S}"

    {% set print_status = printer["gcode_macro _START_PRINT"].print_prepare_status %}
    {% if print_status %}
        RUN_SHELL_COMMAND CMD=screen PARAMS='print_status "{params.S}"'
    {% endif %}
